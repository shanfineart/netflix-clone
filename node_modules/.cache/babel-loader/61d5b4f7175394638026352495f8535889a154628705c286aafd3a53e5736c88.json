{"ast":null,"code":"var _jsxFileName = \"/Users/shanashly/Projects/netflix-clone/src/Row.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport \"./Rows.css\";\nimport YouTube from \"react-youtube\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n\n  // A snippet of code which runs based on a specific condition/variable\n\n  useEffect(() => {\n    // if [], run once when the row loads ad don' t run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__title\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        /* optimizates refresh rate and scrolling */\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}` /* all objects are row__posters, but ($) if isLargeRow, add (&&) a second class */\n        /* if isLargeRow then use movie.poster_path else use movie.backdrop path, note difference in poster shapes */,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: ygUHdHJhaWxlcg,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","YouTube","jsxDEV","_jsxDEV","base_url","Row","title","fetchUrl","isLargeRow","_s","movies","setMovies","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","src","poster_path","backdrop_path","alt","name","id","videoId","ygUHdHJhaWxlcg","_c","$RefreshReg$"],"sources":["/Users/shanashly/Projects/netflix-clone/src/Row.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from './axios';\nimport \"./Rows.css\";\nimport YouTube from \"react-youtube\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n\n// A snippet of code which runs based on a specific condition/variable\n\n    useEffect (() => {\n        // if [], run once when the row loads ad don' t run again\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n           // https://developers.google.com/youtube/player_parameters\n           autoplay: 1, \n        }\n    }\n\n    return (\n        <div className=\"row\">\n            <div className=\"row__title\">\n                <h2>{title}</h2>\n            </div>\n            <div className=\"row__posters\">\n                {movies.map(movie => (\n                    <img \n                        key={movie.id} /* optimizates refresh rate and scrolling */\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} /* all objects are row__posters, but ($) if isLargeRow, add (&&) a second class */\n                        /* if isLargeRow then use movie.poster_path else use movie.backdrop path, note difference in poster shapes */\n                        src={`${base_url}${ isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                        alt={movie.name}\n                    />\n))} \n            </div>\n            <YouTube videoId={ygUHdHJhaWxlcg} opts={opts} />\n        </div>\n  )\n}\n\nexport default Row"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,YAAY;AACnB,OAAOC,OAAO,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,QAAQ,GAAG,sCAAsC;AAEvD,SAASC,GAAGA,CAAC;EAAEC,KAAK;EAAEC,QAAQ;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EAC1C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAE5C;;EAEIC,SAAS,CAAE,MAAM;IACb;IACA,eAAea,SAASA,CAAA,EAAG;MACvB,MAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAG,CAACP,QAAQ,CAAC;MACzCI,SAAS,CAACE,OAAO,CAACE,IAAI,CAACC,OAAO,CAAC;MAC/B,OAAOH,OAAO;IAClB;IACAD,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC;EAEd,MAAMU,IAAI,GAAG;IACTC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE,MAAM;IACbC,UAAU,EAAE;MACT;MACAC,QAAQ,EAAE;IACb;EACJ,CAAC;EAED,oBACIlB,OAAA;IAAKmB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBpB,OAAA;MAAKmB,SAAS,EAAC,YAAY;MAAAC,QAAA,eACvBpB,OAAA;QAAAoB,QAAA,EAAKjB;MAAK;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC,eACNxB,OAAA;MAAKmB,SAAS,EAAC,cAAc;MAAAC,QAAA,EACxBb,MAAM,CAACkB,GAAG,CAACC,KAAK,iBACb1B,OAAA;QACmB;QACfmB,SAAS,EAAG,eAAcd,UAAU,IAAI,kBAAmB,EAAE,CAAC;QAC9D;QACAsB,GAAG,EAAG,GAAE1B,QAAS,GAAGI,UAAU,GAAGqB,KAAK,CAACE,WAAW,GAAGF,KAAK,CAACG,aAAc,EAAE;QAC3EC,GAAG,EAAEJ,KAAK,CAACK;MAAK,GAJXL,KAAK,CAACM,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKhB,CACpB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACe,CAAC,eACNxB,OAAA,CAACF,OAAO;MAACmC,OAAO,EAAEC,cAAe;MAACpB,IAAI,EAAEA;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEd;AAAClB,EAAA,CA3CQJ,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AA6CZ,eAAeA,GAAG;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}