{"ast":null,"code":"var _jsxFileName = \"/Users/shanashly/Projects/netflix-clone/src/Row.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport \"./Rows.css\";\nimport YouTube from \"react-youtube\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  // A snippet of code which runs based on a specific condition/variable\n\n  useEffect(() => {\n    // if [], run once when the row loads ad don' t run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n      }).catch(error => console.log(error));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__title\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        /* optimizates refresh rate and scrolling */\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}` /* all objects are row__posters, but ($) if isLargeRow, add (&&) a second class */\n        /* if isLargeRow then use movie.poster_path else use movie.backdrop path, note difference in poster shapes */,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), tailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","YouTube","jsxDEV","_jsxDEV","base_url","Row","title","fetchUrl","isLargeRow","_s","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","src","poster_path","backdrop_path","alt","id","tailerUrl","videoId","_c","$RefreshReg$"],"sources":["/Users/shanashly/Projects/netflix-clone/src/Row.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from './axios';\nimport \"./Rows.css\";\nimport YouTube from \"react-youtube\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState (\"\");\n// A snippet of code which runs based on a specific condition/variable\n\n    useEffect (() => {\n        // if [], run once when the row loads ad don' t run again\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n           // https://developers.google.com/youtube/player_parameters\n           autoplay: 1, \n        }\n    }\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl(\"\");\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then((url) => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n            })\n            .catch((error) => console.log(error));\n        }\n    };\n\n    return (\n        <div className=\"row\">\n            <div className=\"row__title\">\n                <h2>{title}</h2>\n            </div>\n            <div className=\"row__posters\">\n                {movies.map(movie => (\n                    <img \n                        key={movie.id} /* optimizates refresh rate and scrolling */\n                        onClick={() => handleClick(movie)}\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} /* all objects are row__posters, but ($) if isLargeRow, add (&&) a second class */\n                        /* if isLargeRow then use movie.poster_path else use movie.backdrop path, note difference in poster shapes */\n                        src={`${base_url}${ isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                        alt={movie.name}\n                    />\n))} \n            </div>\n            {tailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n  )\n}\n\nexport default Row"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}