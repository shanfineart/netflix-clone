{"ast":null,"code":"var capability = require('./capability');\nvar inherits = require('inherits');\nvar stream = require('readable-stream');\nvar rStates = exports.readyStates = {\n  UNSENT: 0,\n  OPENED: 1,\n  HEADERS_RECEIVED: 2,\n  LOADING: 3,\n  DONE: 4\n};\nvar IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, resetTimers) {\n  var self = this;\n  stream.Readable.call(self);\n  self._mode = mode;\n  self.headers = {};\n  self.rawHeaders = [];\n  self.trailers = {};\n  self.rawTrailers = [];\n\n  // Fake the 'close' event, but only once 'end' fires\n  self.on('end', function () {\n    // The nextTick is necessary to prevent the 'request' module from causing an infinite loop\n    process.nextTick(function () {\n      self.emit('close');\n    });\n  });\n  if (mode === 'fetch') {\n    var read = function read() {\n      reader.read().then(function (result) {\n        if (self._destroyed) return;\n        resetTimers(result.done);\n        if (result.done) {\n          self.push(null);\n          return;\n        }\n        self.push(Buffer.from(result.value));\n        read();\n      }).catch(function (err) {\n        resetTimers(true);\n        if (!self._destroyed) self.emit('error', err);\n      });\n    };\n    self._fetchResponse = response;\n    self.url = response.url;\n    self.statusCode = response.status;\n    self.statusMessage = response.statusText;\n    response.headers.forEach(function (header, key) {\n      self.headers[key.toLowerCase()] = header;\n      self.rawHeaders.push(key, header);\n    });\n    if (capability.writableStream) {\n      var writable = new WritableStream({\n        write: function write(chunk) {\n          resetTimers(false);\n          return new Promise(function (resolve, reject) {\n            if (self._destroyed) {\n              reject();\n            } else if (self.push(Buffer.from(chunk))) {\n              resolve();\n            } else {\n              self._resumeFetch = resolve;\n            }\n          });\n        },\n        close: function close() {\n          resetTimers(true);\n          if (!self._destroyed) self.push(null);\n        },\n        abort: function abort(err) {\n          resetTimers(true);\n          if (!self._destroyed) self.emit('error', err);\n        }\n      });\n      try {\n        response.body.pipeTo(writable).catch(function (err) {\n          resetTimers(true);\n          if (!self._destroyed) self.emit('error', err);\n        });\n        return;\n      } catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this\n    }\n    // fallback for when writableStream or pipeTo aren't available\n    var reader = response.body.getReader();\n    read();\n  } else {\n    self._xhr = xhr;\n    self._pos = 0;\n    self.url = xhr.responseURL;\n    self.statusCode = xhr.status;\n    self.statusMessage = xhr.statusText;\n    var headers = xhr.getAllResponseHeaders().split(/\\r?\\n/);\n    headers.forEach(function (header) {\n      var matches = header.match(/^([^:]+):\\s*(.*)/);\n      if (matches) {\n        var key = matches[1].toLowerCase();\n        if (key === 'set-cookie') {\n          if (self.headers[key] === undefined) {\n            self.headers[key] = [];\n          }\n          self.headers[key].push(matches[2]);\n        } else if (self.headers[key] !== undefined) {\n          self.headers[key] += ', ' + matches[2];\n        } else {\n          self.headers[key] = matches[2];\n        }\n        self.rawHeaders.push(matches[1], matches[2]);\n      }\n    });\n    self._charset = 'x-user-defined';\n    if (!capability.overrideMimeType) {\n      var mimeType = self.rawHeaders['mime-type'];\n      if (mimeType) {\n        var charsetMatch = mimeType.match(/;\\s*charset=([^;])(;|$)/);\n        if (charsetMatch) {\n          self._charset = charsetMatch[1].toLowerCase();\n        }\n      }\n      if (!self._charset) self._charset = 'utf-8'; // best guess\n    }\n  }\n};\n\ninherits(IncomingMessage, stream.Readable);\nIncomingMessage.prototype._read = function () {\n  var self = this;\n  var resolve = self._resumeFetch;\n  if (resolve) {\n    self._resumeFetch = null;\n    resolve();\n  }\n};\nIncomingMessage.prototype._onXHRProgress = function (resetTimers) {\n  var self = this;\n  var xhr = self._xhr;\n  var response = null;\n  switch (self._mode) {\n    case 'text':\n      response = xhr.responseText;\n      if (response.length > self._pos) {\n        var newData = response.substr(self._pos);\n        if (self._charset === 'x-user-defined') {\n          var buffer = Buffer.alloc(newData.length);\n          for (var i = 0; i < newData.length; i++) buffer[i] = newData.charCodeAt(i) & 0xff;\n          self.push(buffer);\n        } else {\n          self.push(newData, self._charset);\n        }\n        self._pos = response.length;\n      }\n      break;\n    case 'arraybuffer':\n      if (xhr.readyState !== rStates.DONE || !xhr.response) break;\n      response = xhr.response;\n      self.push(Buffer.from(new Uint8Array(response)));\n      break;\n    case 'moz-chunked-arraybuffer':\n      // take whole\n      response = xhr.response;\n      if (xhr.readyState !== rStates.LOADING || !response) break;\n      self.push(Buffer.from(new Uint8Array(response)));\n      break;\n    case 'ms-stream':\n      response = xhr.response;\n      if (xhr.readyState !== rStates.LOADING) break;\n      var reader = new global.MSStreamReader();\n      reader.onprogress = function () {\n        if (reader.result.byteLength > self._pos) {\n          self.push(Buffer.from(new Uint8Array(reader.result.slice(self._pos))));\n          self._pos = reader.result.byteLength;\n        }\n      };\n      reader.onload = function () {\n        resetTimers(true);\n        self.push(null);\n      };\n      // reader.onerror = ??? // TODO: this\n      reader.readAsArrayBuffer(response);\n      break;\n  }\n\n  // The ms-stream case handles end separately in reader.onload()\n  if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {\n    resetTimers(true);\n    self.push(null);\n  }\n};","map":{"version":3,"names":["capability","require","inherits","stream","rStates","exports","readyStates","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","DONE","IncomingMessage","xhr","response","mode","resetTimers","self","Readable","call","_mode","headers","rawHeaders","trailers","rawTrailers","on","process","nextTick","emit","read","reader","then","result","_destroyed","done","push","Buffer","from","value","catch","err","_fetchResponse","url","statusCode","status","statusMessage","statusText","forEach","header","key","toLowerCase","writableStream","writable","WritableStream","write","chunk","Promise","resolve","reject","_resumeFetch","close","abort","body","pipeTo","e","getReader","_xhr","_pos","responseURL","getAllResponseHeaders","split","matches","match","undefined","_charset","overrideMimeType","mimeType","charsetMatch","prototype","_read","_onXHRProgress","responseText","length","newData","substr","buffer","alloc","i","charCodeAt","readyState","Uint8Array","global","MSStreamReader","onprogress","byteLength","slice","onload","readAsArrayBuffer"],"sources":["/Users/shanashly/Projects/netflix-clone/node_modules/stream-http/lib/response.js"],"sourcesContent":["var capability = require('./capability')\nvar inherits = require('inherits')\nvar stream = require('readable-stream')\n\nvar rStates = exports.readyStates = {\n\tUNSENT: 0,\n\tOPENED: 1,\n\tHEADERS_RECEIVED: 2,\n\tLOADING: 3,\n\tDONE: 4\n}\n\nvar IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, resetTimers) {\n\tvar self = this\n\tstream.Readable.call(self)\n\n\tself._mode = mode\n\tself.headers = {}\n\tself.rawHeaders = []\n\tself.trailers = {}\n\tself.rawTrailers = []\n\n\t// Fake the 'close' event, but only once 'end' fires\n\tself.on('end', function () {\n\t\t// The nextTick is necessary to prevent the 'request' module from causing an infinite loop\n\t\tprocess.nextTick(function () {\n\t\t\tself.emit('close')\n\t\t})\n\t})\n\n\tif (mode === 'fetch') {\n\t\tself._fetchResponse = response\n\n\t\tself.url = response.url\n\t\tself.statusCode = response.status\n\t\tself.statusMessage = response.statusText\n\t\t\n\t\tresponse.headers.forEach(function (header, key){\n\t\t\tself.headers[key.toLowerCase()] = header\n\t\t\tself.rawHeaders.push(key, header)\n\t\t})\n\n\t\tif (capability.writableStream) {\n\t\t\tvar writable = new WritableStream({\n\t\t\t\twrite: function (chunk) {\n\t\t\t\t\tresetTimers(false)\n\t\t\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t\t\tif (self._destroyed) {\n\t\t\t\t\t\t\treject()\n\t\t\t\t\t\t} else if(self.push(Buffer.from(chunk))) {\n\t\t\t\t\t\t\tresolve()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself._resumeFetch = resolve\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\tclose: function () {\n\t\t\t\t\tresetTimers(true)\n\t\t\t\t\tif (!self._destroyed)\n\t\t\t\t\t\tself.push(null)\n\t\t\t\t},\n\t\t\t\tabort: function (err) {\n\t\t\t\t\tresetTimers(true)\n\t\t\t\t\tif (!self._destroyed)\n\t\t\t\t\t\tself.emit('error', err)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\ttry {\n\t\t\t\tresponse.body.pipeTo(writable).catch(function (err) {\n\t\t\t\t\tresetTimers(true)\n\t\t\t\t\tif (!self._destroyed)\n\t\t\t\t\t\tself.emit('error', err)\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this\n\t\t}\n\t\t// fallback for when writableStream or pipeTo aren't available\n\t\tvar reader = response.body.getReader()\n\t\tfunction read () {\n\t\t\treader.read().then(function (result) {\n\t\t\t\tif (self._destroyed)\n\t\t\t\t\treturn\n\t\t\t\tresetTimers(result.done)\n\t\t\t\tif (result.done) {\n\t\t\t\t\tself.push(null)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tself.push(Buffer.from(result.value))\n\t\t\t\tread()\n\t\t\t}).catch(function (err) {\n\t\t\t\tresetTimers(true)\n\t\t\t\tif (!self._destroyed)\n\t\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t}\n\t\tread()\n\t} else {\n\t\tself._xhr = xhr\n\t\tself._pos = 0\n\n\t\tself.url = xhr.responseURL\n\t\tself.statusCode = xhr.status\n\t\tself.statusMessage = xhr.statusText\n\t\tvar headers = xhr.getAllResponseHeaders().split(/\\r?\\n/)\n\t\theaders.forEach(function (header) {\n\t\t\tvar matches = header.match(/^([^:]+):\\s*(.*)/)\n\t\t\tif (matches) {\n\t\t\t\tvar key = matches[1].toLowerCase()\n\t\t\t\tif (key === 'set-cookie') {\n\t\t\t\t\tif (self.headers[key] === undefined) {\n\t\t\t\t\t\tself.headers[key] = []\n\t\t\t\t\t}\n\t\t\t\t\tself.headers[key].push(matches[2])\n\t\t\t\t} else if (self.headers[key] !== undefined) {\n\t\t\t\t\tself.headers[key] += ', ' + matches[2]\n\t\t\t\t} else {\n\t\t\t\t\tself.headers[key] = matches[2]\n\t\t\t\t}\n\t\t\t\tself.rawHeaders.push(matches[1], matches[2])\n\t\t\t}\n\t\t})\n\n\t\tself._charset = 'x-user-defined'\n\t\tif (!capability.overrideMimeType) {\n\t\t\tvar mimeType = self.rawHeaders['mime-type']\n\t\t\tif (mimeType) {\n\t\t\t\tvar charsetMatch = mimeType.match(/;\\s*charset=([^;])(;|$)/)\n\t\t\t\tif (charsetMatch) {\n\t\t\t\t\tself._charset = charsetMatch[1].toLowerCase()\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!self._charset)\n\t\t\t\tself._charset = 'utf-8' // best guess\n\t\t}\n\t}\n}\n\ninherits(IncomingMessage, stream.Readable)\n\nIncomingMessage.prototype._read = function () {\n\tvar self = this\n\n\tvar resolve = self._resumeFetch\n\tif (resolve) {\n\t\tself._resumeFetch = null\n\t\tresolve()\n\t}\n}\n\nIncomingMessage.prototype._onXHRProgress = function (resetTimers) {\n\tvar self = this\n\n\tvar xhr = self._xhr\n\n\tvar response = null\n\tswitch (self._mode) {\n\t\tcase 'text':\n\t\t\tresponse = xhr.responseText\n\t\t\tif (response.length > self._pos) {\n\t\t\t\tvar newData = response.substr(self._pos)\n\t\t\t\tif (self._charset === 'x-user-defined') {\n\t\t\t\t\tvar buffer = Buffer.alloc(newData.length)\n\t\t\t\t\tfor (var i = 0; i < newData.length; i++)\n\t\t\t\t\t\tbuffer[i] = newData.charCodeAt(i) & 0xff\n\n\t\t\t\t\tself.push(buffer)\n\t\t\t\t} else {\n\t\t\t\t\tself.push(newData, self._charset)\n\t\t\t\t}\n\t\t\t\tself._pos = response.length\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'arraybuffer':\n\t\t\tif (xhr.readyState !== rStates.DONE || !xhr.response)\n\t\t\t\tbreak\n\t\t\tresponse = xhr.response\n\t\t\tself.push(Buffer.from(new Uint8Array(response)))\n\t\t\tbreak\n\t\tcase 'moz-chunked-arraybuffer': // take whole\n\t\t\tresponse = xhr.response\n\t\t\tif (xhr.readyState !== rStates.LOADING || !response)\n\t\t\t\tbreak\n\t\t\tself.push(Buffer.from(new Uint8Array(response)))\n\t\t\tbreak\n\t\tcase 'ms-stream':\n\t\t\tresponse = xhr.response\n\t\t\tif (xhr.readyState !== rStates.LOADING)\n\t\t\t\tbreak\n\t\t\tvar reader = new global.MSStreamReader()\n\t\t\treader.onprogress = function () {\n\t\t\t\tif (reader.result.byteLength > self._pos) {\n\t\t\t\t\tself.push(Buffer.from(new Uint8Array(reader.result.slice(self._pos))))\n\t\t\t\t\tself._pos = reader.result.byteLength\n\t\t\t\t}\n\t\t\t}\n\t\t\treader.onload = function () {\n\t\t\t\tresetTimers(true)\n\t\t\t\tself.push(null)\n\t\t\t}\n\t\t\t// reader.onerror = ??? // TODO: this\n\t\t\treader.readAsArrayBuffer(response)\n\t\t\tbreak\n\t}\n\n\t// The ms-stream case handles end separately in reader.onload()\n\tif (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {\n\t\tresetTimers(true)\n\t\tself.push(null)\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}